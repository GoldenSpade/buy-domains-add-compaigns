import express from 'express'
import cors from 'cors'
import axios from 'axios'
import { parseStringPromise } from 'xml2js'
import qs from 'qs'
import dotenv from 'dotenv'

// üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
dotenv.config()

const app = express()
const PORT = 3000

// üõ°Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware
app.use(cors())
app.use(express.json())

// üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API Namecheap
const NAMECHEAP_API_USER = process.env.NAMECHEAP_API_USER
const NAMECHEAP_API_KEY = process.env.NAMECHEAP_API_KEY
const CLIENT_IP = process.env.NAMECHEAP_CLIENT_IP
const NAMECHEAP_API_URL = process.env.NAMECHEAP_API_URL || 'https://api.namecheap.com/xml.response'

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
app.post('/check-domain', async (req, res) => {
  const { domain } = req.body

  if (!domain || typeof domain !== 'string') {
    return res.status(400).json({ error: 'No domain provided' })
  }

  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞: ${domain}`)

  try {
    const response = await axios.get(NAMECHEAP_API_URL, {
      params: {
        ApiUser: NAMECHEAP_API_USER,
        ApiKey: NAMECHEAP_API_KEY,
        UserName: NAMECHEAP_API_USER,
        Command: 'namecheap.domains.check',
        ClientIp: CLIENT_IP,
        DomainList: domain,
      },
    })

    const xml = response.data
    console.log('üì¶ XML (–æ–±—Ä–µ–∑–∫–∞):', xml.slice(0, 500))

    const parsed = await parseStringPromise(xml)

    // üß™ –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const status = parsed?.ApiResponse?.$?.Status
    const result = parsed?.ApiResponse?.CommandResponse?.[0]?.DomainCheckResult?.[0]?.$

    const errorMessages = parsed?.ApiResponse?.Errors?.[0]?.Error
    if (errorMessages) {
      const msg = errorMessages[0]?._ || 'Unknown Namecheap error'
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç API:', msg)
      return res.status(500).json({ error: msg })
    }

    if (status !== 'OK' || !result) {
      console.error('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç Namecheap:', parsed)
      return res.status(500).json({ error: 'Invalid Namecheap response structure' })
    }

    const isAvailable = result.Available === 'true'
    console.log(`‚úÖ –î–æ–º–µ–Ω ${domain} ‚Äî ${isAvailable ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–∑–∞–Ω—è—Ç'}`)

    res.json({ available: isAvailable })
  } catch (err) {
    const message = err?.message || 'Unknown error'
    console.error('‚ùå –û—à–∏–±–∫–∞:', message)
    res.status(500).json({ error: message })
  }
})

// –ü–æ–∫—É–ø–∫–∞ –¥–æ–º–µ–Ω–∞
app.post('/buy-domain', async (req, res) => {
  const { domain } = req.body

  if (!domain || typeof domain !== 'string') {
    return res.status(400).json({ error: 'No domain provided' })
  }

  const contact = {
    FirstName: process.env.CONTACT_FIRSTNAME,
    LastName: process.env.CONTACT_LASTNAME,
    Address1: process.env.CONTACT_ADDRESS1,
    City: process.env.CONTACT_CITY,
    StateProvince: process.env.CONTACT_STATE,
    PostalCode: process.env.CONTACT_ZIP,
    Country: process.env.CONTACT_COUNTRY,
    Phone: process.env.CONTACT_PHONE,
    EmailAddress: process.env.CONTACT_EMAIL,
  }

  const params = {
    ApiUser: NAMECHEAP_API_USER,
    ApiKey: NAMECHEAP_API_KEY,
    UserName: NAMECHEAP_API_USER,
    Command: 'namecheap.domains.create',
    ClientIp: CLIENT_IP,
    DomainName: domain,
    Years: 1,
    ...Object.fromEntries(
      ['Registrant', 'Tech', 'Admin', 'AuxBilling'].flatMap((role) =>
        Object.entries(contact).map(([key, value]) => [`${role}${key}`, value])
      )
    ),
  }

  try {
    console.log(`üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–æ–º–µ–Ω–∞: ${domain}`)

    if (process.env.TEST_MODE === 'true') {
      console.log(`üß™ –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º: –ø–æ–∫—É–ø–∫–∞ –¥–æ–º–µ–Ω–∞ ${domain} –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è`)
      return res.json({ success: true, test: true, domain })
    }

    const response = await axios.get(NAMECHEAP_API_URL, { params })
    const xml = response.data
    console.log('üì¶ XML (–æ–±—Ä–µ–∑–∫–∞):', xml.slice(0, 500))

    const parsed = await parseStringPromise(xml)
    const errors = parsed?.ApiResponse?.Errors?.[0]?.Error
    const result = parsed?.ApiResponse?.CommandResponse?.[0]?.DomainCreateResult?.[0]?.$

    if (errors) {
      const msg = errors[0]?._ || 'Unknown Namecheap error'
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', msg)
      return res.status(500).json({ error: msg })
    }

    if (result?.Registered === 'true') {
      console.log(`‚úÖ –î–æ–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω: ${result.Domain}`)
      return res.json({
        success: true,
        domain: result.Domain,
        charged: result.ChargedAmount,
        domainId: result.DomainID,
      })
    }

    return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –¥–æ–º–µ–Ω' })
  } catch (err) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err.message)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—É –¥–æ Sedo.com
app.post('/send-to-sedo', async (req, res) => {
  const { domain, accountKey = 'TT1' } = req.body

  if (!domain) {
    return res.status(400).json({ error: 'No domain provided' })
  }

  const postData = {
    partnerid: process.env[`SEDO_PARTNER_ID_${accountKey}`],
    signkey: process.env[`SEDO_SIGN_KEY_${accountKey}`],
    username: process.env[`VITE_SEDO_USERNAME_${accountKey}`],
    password: process.env[`SEDO_PASSWORD_${accountKey}`],
    output_method: 'xml',
    domainentry: [
      {
        domain,
        forsale: 1,
        price: 0,
        minprice: 0,
        fixedprice: 0,
        currency: 1,
        domainlanguage: 'en',
      },
    ],
  }

  try {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–µ–Ω–∞ –≤ Sedo (${accountKey}):`, postData.username, domain)

    const response = await axios.post(
      'https://api.sedo.com/api/v1/DomainInsert',
      qs.stringify(postData, { arrayFormat: 'indices' }),
      {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      }
    )

    const xml = response.data
    console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Sedo (XML):', xml.slice(0, 500))

    const parsed = await parseStringPromise(xml)
    const result = parsed?.SEDOLIST?.item?.[0]

    const status = result?.status?.[0]
    const domainName = result?.domain?.[0]
    const message = result?.message?.[0] || ''

    if (status === 'ok' && message === '') {
      return res.json({
        success: true,
        domain: domainName,
        info: '',
      })
    }

    return res.status(200).json({
      success: false,
      error: message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
    })
  } catch (err) {
    if (err.response?.data?.startsWith?.('<?xml')) {
      const parsedError = await parseStringPromise(err.response.data)
      console.error('‚ùå XML-–æ—à–∏–±–∫–∞ –æ—Ç Sedo:', JSON.stringify(parsedError, null, 2))
      const faultString = parsedError?.SEDOFAULT?.faultstring?.[0] || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
      return res.status(500).json({ error: faultString })
    }

    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Sedo:', err.response?.data || err.message)
    return res.status(500).json({ error: err.message || '–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞' })
  }
})

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ DNS –¥–ª—è –¥–æ–º–µ–Ω–æ–≤
app.post('/set-dns', async (req, res) => {
  const { domain, nameservers } = req.body

  if (!domain || !Array.isArray(nameservers) || nameservers.length === 0) {
    return res.status(400).json({ error: 'Invalid input data' })
  }

  // üîç –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –Ω–∞ SLD –∏ TLD
  const [sld, ...tldParts] = domain.split('.')
  const tld = tldParts.join('.')

  if (!sld || !tld) {
    return res.status(400).json({ error: 'Invalid domain format' })
  }

  try {
    const response = await axios.get(NAMECHEAP_API_URL, {
      params: {
        ApiUser: NAMECHEAP_API_USER,
        ApiKey: NAMECHEAP_API_KEY,
        UserName: NAMECHEAP_API_USER,
        Command: 'namecheap.domains.dns.setCustom',
        ClientIp: CLIENT_IP,
        SLD: sld,
        TLD: tld,
        Nameservers: nameservers.join(','),
      },
    })

    const parsed = await parseStringPromise(response.data)
    const errors = parsed?.ApiResponse?.Errors?.[0]?.Error

    if (errors) {
      const msg = errors[0]?._ || 'Unknown DNS error'
      console.error('‚ùå DNS Error:', msg)
      return res.status(500).json({ error: msg })
    }

    console.log(`‚úÖ DNS –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è ${domain}:`, nameservers.join(', '))
    return res.json({ success: true, domain, nameservers })
  } catch (err) {
    console.error('‚ùå set-dns exception:', err.message)
    res.status(500).json({ error: 'Server error while setting DNS' })
  }
})

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Ñ–µ—Ä —É ClickFlare
app.post('/clickflare/create-offer', async (req, res) => {
  const { name, url, workspace_id } = req.body
  const API_KEY = process.env.VITE_CLICKFLARE_API_KEY
  const AFFILIATE_NETWORK_ID = process.env.VITE_AFFILIATE_NETWORK_SEDO_ID

  if (!name || !url || !workspace_id) {
    console.warn('‚ö†Ô∏è –ù–µ –≤–∏—Å—Ç–∞—á–∞—î –æ–±–æ–≤ º—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤:', { name, url, workspace_id })
    return res.status(400).json({ error: 'Missing required fields: name, url, workspace_id' })
  }

  const payload = {
    name,
    url,
    workspace_id,
    direct: true,
    affiliateNetworkID: AFFILIATE_NETWORK_ID,
    payout: {
      type: 'manual',
      payout: 0,
      currency: 'USD',
    },
    keywordBuilderMode: 'free_form',
  }

  try {
    const response = await axios.post('https://public-api.clickflare.io/api/offers', payload, {
      headers: {
        'Content-Type': 'application/json',
        'api-key': API_KEY,
      },
    })

    const offerId = response.data?.id || response.data?.offer_id

    if (!offerId) {
      console.warn('‚ö†Ô∏è –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ ID –æ—Ñ—Ñ–µ—Ä–∞:', response.data)
    }

    res.json({ success: true, offerId })
  } catch (error) {
    const rawData = error?.response?.data
    const statusCode = error?.response?.status || 500

    const msg =
      rawData?.message || rawData?.data?.[0]?.message || error.message || 'Unknown server error'

    console.error('‚ùå ClickFlare error:', {
      message: msg,
      status: statusCode,
      data: rawData,
      fullError: JSON.stringify(error?.response?.data?.data, null, 2), // <-- –≤–æ—Ç –∫–ª—é—á
    })

    res.status(statusCode).json({ error: msg })
  }
})

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–º–ø–∞–Ω—ñ–π Tonic

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω—ñ–π –¥–ª—è —Ñ–æ—Ä–º–∏
app.get('/tonic/offers', async (req, res) => {
  const rawSource = req.query.trafficSource
  const trafficSource = rawSource?.trim?.()

  if (!trafficSource) {
    return res.status(400).json({ error: 'Missing trafficSource' })
  }

  let key, secret

  if (trafficSource === 'TikTok') {
    key = process.env.VITE_TONIC_ARTEM_TT_CONSUMER_KEY
    secret = process.env.VITE_TONIC_ARTEM_TT_CONSUMER_SECRET
  } else if (trafficSource === 'Facebook') {
    key = process.env.VITE_TONIC_MAX_FB_CONSUMER_KEY
    secret = process.env.VITE_TONIC_MAX_FB_CONSUMER_SECRET
  } else {
    return res.status(400).json({ error: 'Invalid trafficSource' })
  }

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ JWT
    const jwtResp = await axios.post(
      'https://api.publisher.tonic.com/jwt/authenticate',
      {
        consumer_key: key,
        consumer_secret: secret,
      },
      {
        headers: { 'Content-Type': 'application/json' },
      }
    )

    const jwtToken = jwtResp.data.token

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–æ–≤ —Å JWT
    const offersResp = await axios.get(
      'https://api.publisher.tonic.com/privileged/v3/offers/list?output=json',
      {
        headers: {
          Authorization: `Bearer ${jwtToken}`,
          'Content-Type': 'application/json',
        },
      }
    )

    res.json({ offers: offersResp.data }) // —ç—Ç–æ –º–∞—Å—Å–∏–≤
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ñ—Ñ–µ—Ä–æ–≤:', err?.response?.data || err.message)
    res.status(500).json({ error: err?.response?.data || err.message })
  }
})

// üîç –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—Ä–∞—ó–Ω, –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
app.get('/tonic/countries/allowed', async (req, res) => {
  const offer = req.query.offer
  const trafficSource = req.query.trafficSource

  if (!offer || !trafficSource) {
    return res.status(400).json({ error: 'Missing offer or trafficSource' })
  }

  try {
    const token = await getTonicJwtToken(trafficSource.toLowerCase())

    const response = await axios.get(
      `https://api.publisher.tonic.com/privileged/v3/countries/combination?offer=${encodeURIComponent(
        offer
      )}&output=json`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      }
    )

    res.json({ allowedCountries: response.data })
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫—Ä–∞—ó–Ω:', err?.response?.data || err.message)
    res.status(500).json({ error: err?.response?.data || err.message })
  }
})

// –ö–µ—à –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è jwt-—Ç–æ–∫–µ–Ω–∞
const tonicTokenCache = {
  tiktok: { token: '', expiresAt: 0 },
  facebook: { token: '', expiresAt: 0 },
}

// üîê –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –ø–æ trafficSource
async function getTonicJwtToken(trafficSource) {
  const source = trafficSource.toLowerCase()

  // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω ‚Äî –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ
  const cached = tonicTokenCache[source]
  if (cached?.token && Date.now() < cached.expiresAt) {
    return cached.token
  }

  let key, secret
  if (source === 'tiktok') {
    key = process.env.VITE_TONIC_ARTEM_TT_CONSUMER_KEY
    secret = process.env.VITE_TONIC_ARTEM_TT_CONSUMER_SECRET
  } else if (source === 'facebook') {
    key = process.env.VITE_TONIC_MAX_FB_CONSUMER_KEY
    secret = process.env.VITE_TONIC_MAX_FB_CONSUMER_SECRET
  } else {
    throw new Error(`üîí –ù–µ–≤—ñ–¥–æ–º–∏–π trafficSource: ${trafficSource}`)
  }

  const response = await axios.post(
    'https://api.publisher.tonic.com/jwt/authenticate',
    {
      consumer_key: key,
      consumer_secret: secret,
    },
    {
      headers: { 'Content-Type': 'application/json' },
    }
  )

  const token = response.data.token
  const expiresInMs = 90 * 60 * 1000 // 90 –º–∏–Ω—É—Ç
  tonicTokenCache[source] = {
    token,
    expiresAt: Date.now() + expiresInMs - 60 * 1000, // —Å –∑–∞–ø–∞—Å–æ–º –≤ 1 –º–∏–Ω—É—Ç—É
  }

  return token
}

// üéØ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è (–≤—ñ–¥–ø—Ä–∞–≤–∫–∞) –Ω–æ–≤–æ—ó –∫–∞–º–ø–∞–Ω—ñ—ó
app.post('/tonic/create-campaign', async (req, res) => {
  const { name, offer, country, trafficSource } = req.body

  // üõë –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ
  if (!name || !offer || !country) {
    return res.status(400).json({
      error: 'Missing required fields: name, offer, country',
    })
  }

  if (!trafficSource) {
    return res.status(400).json({
      error: 'Missing trafficSource for token auth',
    })
  }

  try {
    const token = await getTonicJwtToken(trafficSource.toLowerCase())

    const queryParams = new URLSearchParams({
      name,
      offer,
      country,
      return_type: 'id',
      imprint: 'yes',
      headline_id: '1',
    }).toString()

    const response = await axios.post(
      `https://api.publisher.tonic.com/privileged/v3/campaign/create?${queryParams}`,
      {},
      {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      }
    )

    // üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥
    console.log('üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ Tonic:', queryParams)
    console.log('üì© –û—Ç–≤–µ—Ç Tonic API (RAW):', JSON.stringify(response.data, null, 2))

    if (response.data.success === false || response.data.error) {
      console.error('Tonic error:', response.data)
      return res.status(400).json({
        error: response.data.error || 'Tonic API error',
      })
    }

    res.json({ success: true, data: response.data })
  } catch (err) {
    const status = err.response?.status || 500
    const errorData = err.response?.data || err.message
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ (status ${status}):`, errorData)

    res.status(status).json({ error: errorData })
  }
})

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –∫–∞–º–ø–∞–Ω—ñ–π
app.get('/tonic/find-campaign', async (req, res) => {
  const { name, trafficSource } = req.query
  if (!name || !trafficSource) return res.status(400).json({ error: 'Missing params' })

  try {
    const token = await getTonicJwtToken(trafficSource.toLowerCase())

    const resp = await axios.get(
      'https://api.publisher.tonic.com/privileged/v3/campaign/list?output=json',
      {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      }
    )

    const found = resp.data.find((c) => c.name === name)

    if (found) {
      return res.json({
        success: true,
        id: found.id,
        link: found.link || found.target,
        status: found.status || null,
      })
    } else {
      return res.status(404).json({ error: 'Campaign not found' })
    }
  } catch (err) {
    res.status(500).json({ error: err?.message || 'Server error' })
  }
})

// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω—ñ—ó –ø–æ ID –∞–±–æ name
app.get('/tonic/campaign-status', async (req, res) => {
  const { id, name, trafficSource } = req.query

  if (!trafficSource || (!id && !name)) {
    return res.status(400).json({ error: 'Missing id/name or trafficSource' })
  }

  try {
    const token = await getTonicJwtToken(trafficSource.toLowerCase())

    const query = new URLSearchParams()
    if (id) query.append('id', id)
    if (name) query.append('name', name)

    const response = await axios.get(
      `https://api.publisher.tonic.com/privileged/v3/campaign/status?${query.toString()}`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      }
    )

    const data = response.data

    return res.json({
      success: true,
      status: data.status || 'unknown',
      link: data?.[0]?.link || '',
    })
  } catch (err) {
    const code = err?.response?.status
    if (code === 404) {
      return res.status(200).json({
        success: true,
        status: 'inactive',
      })
    }

    console.error('‚ùå –°—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω—ñ—ó (–ø–æ–º–∏–ª–∫–∞):', err?.message || err)
    return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω—ñ—ó' })
  }
})

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${process.env.VITE_API_BASE_URL || 'http://localhost'}:${PORT}`)
})
