import express from 'express'
import axios from 'axios'
import dotenv from 'dotenv'

dotenv.config()

const router = express.Router()

// üîê JWT-–∫–µ—à
const tonicTokenCache = {
  tiktok: { token: '', expiresAt: 0 },
  facebook: { token: '', expiresAt: 0 },
}

// üîê –ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω
async function getTonicJwtToken(trafficSource) {
  const source = trafficSource.toLowerCase()

  const cached = tonicTokenCache[source]
  if (cached?.token && Date.now() < cached.expiresAt) {
    return cached.token
  }

  let key, secret
  if (source === 'tiktok') {
    key = process.env.VITE_TONIC_ARTEM_TT_CONSUMER_KEY
    secret = process.env.VITE_TONIC_ARTEM_TT_CONSUMER_SECRET
  } else if (source === 'facebook') {
    key = process.env.VITE_TONIC_MAX_FB_CONSUMER_KEY
    secret = process.env.VITE_TONIC_MAX_FB_CONSUMER_SECRET
  } else {
    throw new Error(`üîí –ù–µ–≤—ñ–¥–æ–º–∏–π trafficSource: ${trafficSource}`)
  }

  const response = await axios.post(
    'https://api.publisher.tonic.com/jwt/authenticate',
    {
      consumer_key: key,
      consumer_secret: secret,
    },
    {
      headers: { 'Content-Type': 'application/json' },
    }
  )

  const token = response.data.token
  tonicTokenCache[source] = {
    token,
    expiresAt: Date.now() + 90 * 60 * 1000 - 60 * 1000, // 90 –º–∏–Ω - 1 –º–∏–Ω –∑–∞–ø–∞—Å
  }

  return token
}

// üì¶ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤
router.get('/tonic/offers', async (req, res) => {
  const rawSource = req.query.trafficSource
  const trafficSource = rawSource?.trim?.()

  if (!trafficSource) {
    return res.status(400).json({ error: 'Missing trafficSource' })
  }

  let key, secret
  if (trafficSource === 'TikTok') {
    key = process.env.VITE_TONIC_ARTEM_TT_CONSUMER_KEY
    secret = process.env.VITE_TONIC_ARTEM_TT_CONSUMER_SECRET
  } else if (trafficSource === 'Facebook') {
    key = process.env.VITE_TONIC_MAX_FB_CONSUMER_KEY
    secret = process.env.VITE_TONIC_MAX_FB_CONSUMER_SECRET
  } else {
    return res.status(400).json({ error: 'Invalid trafficSource' })
  }

  try {
    const jwtResp = await axios.post(
      'https://api.publisher.tonic.com/jwt/authenticate',
      {
        consumer_key: key,
        consumer_secret: secret,
      },
      {
        headers: { 'Content-Type': 'application/json' },
      }
    )

    const jwtToken = jwtResp.data.token

    const offersResp = await axios.get(
      'https://api.publisher.tonic.com/privileged/v3/offers/list?output=json',
      {
        headers: {
          Authorization: `Bearer ${jwtToken}`,
          'Content-Type': 'application/json',
        },
      }
    )

    res.json({ offers: offersResp.data })
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ñ—Ñ–µ—Ä–æ–≤:', err?.response?.data || err.message)
    res.status(500).json({ error: err?.response?.data || err.message })
  }
})

// üåç –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
router.get('/tonic/countries/allowed', async (req, res) => {
  const { offer, trafficSource } = req.query

  if (!offer || !trafficSource) {
    return res.status(400).json({ error: 'Missing offer or trafficSource' })
  }

  try {
    const token = await getTonicJwtToken(trafficSource.toLowerCase())

    const response = await axios.get(
      `https://api.publisher.tonic.com/privileged/v3/countries/combination?offer=${encodeURIComponent(
        offer
      )}&output=json`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      }
    )

    res.json({ allowedCountries: response.data })
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫—Ä–∞—ó–Ω:', err?.response?.data || err.message)
    res.status(500).json({ error: err?.response?.data || err.message })
  }
})

// üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
router.post('/tonic/create-campaign', async (req, res) => {
  const { name, offer, country, trafficSource } = req.body

  if (!name || !offer || !country || !trafficSource) {
    return res.status(400).json({ error: 'Missing required fields' })
  }

  try {
    const token = await getTonicJwtToken(trafficSource.toLowerCase())

    const queryParams = new URLSearchParams({
      name,
      offer,
      country,
      return_type: 'id',
      imprint: 'yes',
      headline_id: '1',
    }).toString()

    const response = await axios.post(
      `https://api.publisher.tonic.com/privileged/v3/campaign/create?${queryParams}`,
      {},
      {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      }
    )

    if (response.data.success === false || response.data.error) {
      return res.status(400).json({ error: response.data.error || 'Tonic API error' })
    }

    res.json({ success: true, data: response.data })
  } catch (err) {
    const status = err?.response?.status || 500
    const errorData = err?.response?.data || err.message
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ (status ${status}):`, errorData)

    res.status(status).json({ error: errorData })
  }
})

// üîç –ü–æ–∏—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏ –ø–æ –∏–º–µ–Ω–∏
// –û–Ω–æ–≤–ª–µ–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç find-campaign –≤ tonic.js
router.get('/tonic/find-campaign', async (req, res) => {
  const { name, trafficSource } = req.query
  if (!name || !trafficSource) return res.status(400).json({ error: 'Missing params' })

  try {
    const token = await getTonicJwtToken(trafficSource.toLowerCase())

    console.log(`üîç –ü–æ—à—É–∫ –∫–∞–º–ø–∞–Ω—ñ—ó:`)
    console.log(`   –û—Ç—Ä–∏–º–∞–Ω–∞ –Ω–∞–∑–≤–∞: "${name}"`)
    console.log(`   Traffic Source: "${trafficSource}"`)

    // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –Ø–∫—â–æ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∏—Ç—å resId_, –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ –¥–ª—è –ø–æ—à—É–∫—É
    let searchName = name

    const resIdMatch = name.match(/^(\d+)_(.+)$/)
    if (resIdMatch) {
      searchName = resIdMatch[2] // –ë–µ—Ä–µ–º–æ —á–∞—Å—Ç–∏–Ω—É –ø—ñ—Å–ª—è resId_
      console.log(`   –ü–æ—à—É–∫ –∑–∞ –æ—á–∏—â–µ–Ω–æ—é –Ω–∞–∑–≤–æ—é: "${searchName}"`)
    }

    const resp = await axios.get(
      'https://api.publisher.tonic.com/privileged/v3/campaign/list?output=json',
      {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      }
    )

    // –®—É–∫–∞—î–º–æ –∫–∞–º–ø–∞–Ω—ñ—é –∑–∞ –æ—á–∏—â–µ–Ω–æ—é –Ω–∞–∑–≤–æ—é
    const found = resp.data.find((c) => c.name === searchName)

    if (found) {
      console.log(`‚úÖ –ö–∞–º–ø–∞–Ω—ñ—é –∑–Ω–∞–π–¥–µ–Ω–æ:`, {
        id: found.id,
        name: found.name,
        link: found.link || found.target,
      })

      return res.json({
        success: true,
        id: found.id,
        link: found.link || found.target,
      })
    } else {
      console.log(`‚ùå –ö–∞–º–ø–∞–Ω—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–µ–¥ ${resp.data.length} –∫–∞–º–ø–∞–Ω—ñ–π`)
      return res.status(404).json({ error: 'Campaign not found' })
    }
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–∞–º–ø–∞–Ω—ñ—ó:', err?.message || err)
    res.status(500).json({ error: err?.message || 'Server error' })
  }
})

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
router.get('/tonic/campaign-status', async (req, res) => {
  const { name, trafficSource } = req.query

  if (!name || !trafficSource) {
    return res.status(400).json({ error: 'Missing name or trafficSource' })
  }

  try {
    const token = await getTonicJwtToken(trafficSource.toLowerCase())

    console.log(`üîç –ó–∞–ø–∏—Ç —Å—Ç–∞—Ç—É—Å—É –∫–∞–º–ø–∞–Ω—ñ—ó:`)
    console.log(`   –û—Ç—Ä–∏–º–∞–Ω–∞ –Ω–∞–∑–≤–∞: "${name}"`)
    console.log(`   Traffic Source: "${trafficSource}"`)

    // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –Ø–∫—â–æ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∏—Ç—å resId_, –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ –¥–ª—è API –∑–∞–ø–∏—Ç—É
    let cleanName = name

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–∑–≤–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —Ü–∏—Ñ—Ä + –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è (resId_)
    const resIdMatch = name.match(/^(\d+)_(.+)$/)
    if (resIdMatch) {
      cleanName = resIdMatch[2] // –ë–µ—Ä–µ–º–æ —á–∞—Å—Ç–∏–Ω—É –ø—ñ—Å–ª—è resId_
      console.log(`   –û—á–∏—â–µ–Ω–∞ –Ω–∞–∑–≤–∞ (–±–µ–∑ resId): "${cleanName}"`)
    }

    const response = await axios.get(
      `https://api.publisher.tonic.com/privileged/v3/campaign/status`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        params: { name: cleanName }, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—á–∏—â–µ–Ω—É –Ω–∞–∑–≤—É
      }
    )

    const data = response.data

    console.log(`üìä –í—ñ–¥–ø–æ–≤—ñ–¥—å Tonic API:`, data)

    return res.json({
      success: true,
      status: data?.status || 'unknown',
      link: data?.link || '',
    })
  } catch (err) {
    const code = err?.response?.status || 500

    if (code === 404) {
      console.log(`‚ÑπÔ∏è –ö–∞–º–ø–∞–Ω—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ (404) - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ status: inactive`)
      return res.status(200).json({ success: true, status: 'inactive' })
    }

    console.error('‚ùå –°—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω—ñ—ó (–ø–æ–º–∏–ª–∫–∞):', err?.message || err)
    return res.status(500).json({ error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω—ñ—ó' })
  }
})

export default router
