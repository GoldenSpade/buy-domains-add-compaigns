import express from 'express'
import OpenAI from 'openai'
import dotenv from 'dotenv'

dotenv.config()

const router = express.Router()

const openai = new OpenAI({
  apiKey: process.env.CHATGPT_API_KEY,
})

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è adtitle –¥–ª—è –∫–∞–º–ø–∞–Ω—ñ—ó
router.post('/chatgpt/generate-adtitle', async (req, res) => {
  const { offer, country, trafficSource, promptSettings } = req.body
  try {
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
    const finalOffer = offer && offer.trim() !== '' ? offer.trim() : 'sample offer'
    const finalCountry = country && country.trim() !== '' ? country.trim() : 'global'
    const finalTrafficSource =
      trafficSource && trafficSource.trim() !== '' ? trafficSource.trim() : 'social media'

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ store –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const systemPrompt =
      promptSettings?.systemPrompt ||
      'You are a expert marketing copywriter. Generate compelling, short SEO ad titles that grab attention and drive clicks. Always respond with just the title, no quotes or additional text.'

    const userPromptTemplate =
      promptSettings?.userPromptTemplate ||
      'Generate a SEO headline / SEO ad title for social media ad on topic "{offer}" for {country} audience on {trafficSource} platform. Maximum 50 characters. Return only the title without quotes or extra text.'

    const settings = promptSettings?.settings || {
      model: 'gpt-4o-mini',
      temperature: 0.7,
      max_tokens: 100,
    }

    // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    const userMessage = userPromptTemplate
      .replace('{offer}', finalOffer)
      .replace('{country}', finalCountry)
      .replace('{trafficSource}', finalTrafficSource)

    console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–ø–∏—Ç –¥–æ ChatGPT:', userMessage)
    console.log('üîß –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', settings)

    const completion = await openai.chat.completions.create({
      model: settings.model,
      messages: [
        {
          role: 'system',
          content: systemPrompt,
        },
        {
          role: 'user',
          content: userMessage,
        },
      ],
      max_tokens: settings.max_tokens,
      temperature: settings.temperature,
    })

    const generatedTitle = completion.choices[0].message.content.trim()
    console.log('üì• –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ChatGPT:', generatedTitle)

    // –ö–æ–¥—É—î–º–æ –¥–ª—è URL
    const encodedTitle = encodeURIComponent(generatedTitle)

    res.json({
      success: true,
      data: {
        originalTitle: generatedTitle,
        encodedTitle: encodedTitle,
      },
    })
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ ChatGPT:', error)

    let errorMessage = '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    if (error.code === 'insufficient_quota') {
      errorMessage = '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∫–≤–æ—Ç—É API'
    } else if (error.code === 'invalid_api_key') {
      errorMessage = '–ù–µ–≤—ñ—Ä–Ω–∏–π API –∫–ª—é—á'
    } else if (error.message) {
      errorMessage = error.message
    }

    res.status(500).json({
      success: false,
      error: errorMessage,
    })
  }
})

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è Tonik –ø–æ –≤–≤–µ–¥–µ–Ω–∏—Ö —Å–ª–æ–≤–∞—Ö
router.post('/chatgpt/generate-keywords-from-words', async (req, res) => {
  try {
    const { inputWords, country, trafficSource, promptSettings } = req.body

    // –ï—Å–ª–∏ inputWords –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const finalInputWords =
      inputWords && inputWords.trim() !== '' ? inputWords.trim() : 'digital marketing services'

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ store –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const systemPrompt =
      promptSettings?.systemPrompt ||
      'You are an expert SEO and PPC specialist. Generate high-value, expensive keywords that would have high cost-per-click in Google Ads. Focus on commercial intent keywords. Always respond with just the keywords separated by commas, no additional text.'

    const userPromptTemplate =
      promptSettings?.userPromptTemplate ||
      "Give me 6 most expensive keywords from Google Keywords Planner related to: \"{inputWords}\". ${country ? `Target country: {country}. ` : ''}${trafficSource ? `Traffic source: {trafficSource}. ` : ''}Return only the keywords separated by commas, without any additional text or explanations."

    const settings = promptSettings?.settings || {
      model: 'gpt-4o-mini',
      temperature: 0.7,
      max_tokens: 150,
    }

    // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    const userMessage = userPromptTemplate
      .replace('{inputWords}', finalInputWords)
      .replace('{country}', country || '')
      .replace('{trafficSource}', trafficSource || '')

    console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–ø–∏—Ç –¥–æ ChatGPT –¥–ª—è keywords:', userMessage)
    console.log('üîß –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', settings)

    const completion = await openai.chat.completions.create({
      model: settings.model,
      messages: [
        {
          role: 'system',
          content: systemPrompt,
        },
        {
          role: 'user',
          content: userMessage,
        },
      ],
      max_tokens: settings.max_tokens,
      temperature: settings.temperature,
    })

    const generatedKeywords = completion.choices[0].message.content.trim()
    console.log('üì• –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ChatGPT keywords:', generatedKeywords)

    res.json({
      success: true,
      data: {
        keywords: generatedKeywords,
        inputWords: finalInputWords,
      },
    })
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ keywords –¥–æ ChatGPT:', error)

    let errorMessage = '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    if (error.code === 'insufficient_quota') {
      errorMessage = '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∫–≤–æ—Ç—É API'
    } else if (error.code === 'invalid_api_key') {
      errorMessage = '–ù–µ–≤—ñ—Ä–Ω–∏–π API –∫–ª—é—á'
    } else if (error.message) {
      errorMessage = error.message
    }

    res.status(500).json({
      success: false,
      error: errorMessage,
    })
  }
})

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è Tonik –ø–æ URL
router.post('/chatgpt/generate-keywords-from-url', async (req, res) => {
  try {
    const { url, country, trafficSource } = req.body

    if (!url || url.trim() === '') {
      return res.status(400).json({
        success: false,
        error: 'URL is required',
      })
    }

    // –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é)
    const userMessage = `Analyze the content and topic of this URL: "${url.trim()}" and give me 6 most expensive keywords from Google Keywords Planner based on the website's content and niche. ${
      country ? `Target country: ${country}. ` : ''
    }${
      trafficSource ? `Traffic source: ${trafficSource}. ` : ''
    }Focus on high commercial intent keywords that would be expensive in Google Ads for this type of website. Return only the keywords separated by commas, without any additional text or explanations.`

    console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∑–∞–ø–∏—Ç –¥–æ ChatGPT –¥–ª—è keywords –ø–æ URL:', userMessage)

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content:
            'You are an expert SEO and PPC specialist. Analyze website URLs and generate high-value, expensive keywords based on the website content and niche. Focus on commercial intent keywords that would have high cost-per-click in Google Ads. Always respond with just the keywords separated by commas, no additional text.',
        },
        {
          role: 'user',
          content: userMessage,
        },
      ],
      max_tokens: 150,
      temperature: 0.7,
    })

    const generatedKeywords = completion.choices[0].message.content.trim()
    console.log('üì• –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ChatGPT keywords –ø–æ URL:', generatedKeywords)

    res.json({
      success: true,
      data: {
        keywords: generatedKeywords,
        sourceUrl: url.trim(),
      },
    })
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ keywords –ø–æ URL –¥–æ ChatGPT:', error)

    let errorMessage = '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
    if (error.code === 'insufficient_quota') {
      errorMessage = '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∫–≤–æ—Ç—É API'
    } else if (error.code === 'invalid_api_key') {
      errorMessage = '–ù–µ–≤—ñ—Ä–Ω–∏–π API –∫–ª—é—á'
    } else if (error.message) {
      errorMessage = error.message
    }

    res.status(500).json({
      success: false,
      error: errorMessage,
    })
  }
})

export default router
