import { defineStore } from 'pinia'
import { ref } from 'vue'

export const useTonicStore = defineStore('tonic', () => {
  const cards = ref([])
  const activeCards = ref([]) // –ö–∞—Ä—Ç–∫–∏ –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ localStorage –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  const loadFromStorage = () => {
    try {
      const stored = localStorage.getItem('tonic-active-cards')
      if (stored) {
        activeCards.value = JSON.parse(stored)
        console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ localStorage:', activeCards.value.length, '–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫')
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ localStorage:', error)
      activeCards.value = []
    }
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ localStorage
  const saveToStorage = () => {
    try {
      localStorage.setItem('tonic-active-cards', JSON.stringify(activeCards.value))
      console.log('üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage:', activeCards.value.length, '–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫')
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ localStorage:', error)
    }
  }

  const addCard = (card) => {
    cards.value.push(card)
  }

  const clearCards = () => {
    cards.value = []
  }

  const removeCard = (cardToRemove) => {
    cards.value = cards.value.filter(
      (card) =>
        !(
          card.offer === cardToRemove.offer &&
          card.country === cardToRemove.country &&
          card.buyer === cardToRemove.buyer &&
          card.trafficSource === cardToRemove.trafficSource
        )
    )
  }

  // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –∑ –ª—ñ–≤–æ—ó –∫–æ–ª–æ–Ω–∫–∏ –≤ –ø—Ä–∞–≤—É (–∞–∫—Ç–∏–≤–Ω—ñ)
  const moveToActive = (card) => {
    // –í–∏–¥–∞–ª—è—î–º–æ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
    removeCard(card)

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î –≤ –∞–∫—Ç–∏–≤–Ω–∏—Ö
    const exists = activeCards.value.find(
      (activeCard) =>
        activeCard.offer === card.offer &&
        activeCard.country === card.country &&
        activeCard.buyer === card.buyer &&
        activeCard.trafficSource === card.trafficSource
    )

    if (!exists) {
      // –î–æ–¥–∞—î–º–æ –¥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑ –ø–æ—Ç–æ—á–Ω–∏–º —á–∞—Å–æ–º
      const activeCard = {
        ...card,
        movedToActiveAt: Date.now(),
        lastStatusCheck: Date.now(),
      }

      activeCards.value.push(activeCard)
      saveToStorage()

      console.log('‚û°Ô∏è –ö–∞—Ä—Ç–∫—É –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤ –∞–∫—Ç–∏–≤–Ω—ñ:', {
        offer: card.offer,
        country: card.country,
        buyer: card.buyer,
      })
    }
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–∫—Ç–∏–≤–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏
  const updateActiveCardStatus = (cardKey, statusData) => {
    const index = activeCards.value.findIndex((card) => {
      const key = `${card.offer}-${card.country}-${card.buyer}-${card.trafficSource}`
      return key === cardKey
    })

    if (index !== -1) {
      activeCards.value[index] = {
        ...activeCards.value[index],
        ...statusData,
        lastStatusCheck: Date.now(),
      }
      saveToStorage()
    }
  }

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫
  const removeActiveCard = (cardToRemove) => {
    activeCards.value = activeCards.value.filter(
      (card) =>
        !(
          card.offer === cardToRemove.offer &&
          card.country === cardToRemove.country &&
          card.buyer === cardToRemove.buyer &&
          card.trafficSource === cardToRemove.trafficSource
        )
    )
    saveToStorage()
  }

  // –û—á–∏—â–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫
  const clearActiveCards = () => {
    activeCards.value = []
    localStorage.removeItem('tonic-active-cards')
  }

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è store
  loadFromStorage()

  return {
    cards,
    activeCards,
    addCard,
    clearCards,
    removeCard,
    moveToActive,
    updateActiveCardStatus,
    removeActiveCard,
    clearActiveCards,
    loadFromStorage,
  }
})
